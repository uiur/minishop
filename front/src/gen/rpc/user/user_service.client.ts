// @generated by protobuf-ts 2.0.0-alpha.20 with parameters long_type_number,generate_dependencies
// @generated from protobuf file "rpc/user/user_service.proto" (package "rpc.user", syntax proto3)
// tslint:disable
import type { RpcTransport } from '@protobuf-ts/runtime-rpc'
import type { ServiceInfo } from '@protobuf-ts/runtime-rpc'
import { User } from './user_service'
import type { UsersResponse } from './users_response'
import type { Empty } from '../../google/protobuf/empty'
import type { CreateRequest } from './create_request'
import { stackIntercept } from '@protobuf-ts/runtime-rpc'
import type { UserResponse } from './user_response'
import type { ShowRequest } from './show_request'
import type { UnaryCall } from '@protobuf-ts/runtime-rpc'
import type { RpcOptions } from '@protobuf-ts/runtime-rpc'
/**
 * @generated from protobuf service rpc.user.User
 */
export interface IUserClient {
  /**
   * @generated from protobuf rpc: Show(rpc.user.ShowRequest) returns (rpc.user.UserResponse);
   */
  show(
    input: ShowRequest,
    options?: RpcOptions
  ): UnaryCall<ShowRequest, UserResponse>
  /**
   * @generated from protobuf rpc: Create(rpc.user.CreateRequest) returns (rpc.user.UserResponse);
   */
  create(
    input: CreateRequest,
    options?: RpcOptions
  ): UnaryCall<CreateRequest, UserResponse>
  /**
   * @generated from protobuf rpc: Index(google.protobuf.Empty) returns (rpc.user.UsersResponse);
   */
  index(input: Empty, options?: RpcOptions): UnaryCall<Empty, UsersResponse>
}
/**
 * @generated from protobuf service rpc.user.User
 */
export class UserClient implements IUserClient, ServiceInfo {
  typeName = User.typeName
  methods = User.methods
  options = User.options
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * @generated from protobuf rpc: Show(rpc.user.ShowRequest) returns (rpc.user.UserResponse);
   */
  show(
    input: ShowRequest,
    options?: RpcOptions
  ): UnaryCall<ShowRequest, UserResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options)
    return stackIntercept<ShowRequest, UserResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input
    )
  }
  /**
   * @generated from protobuf rpc: Create(rpc.user.CreateRequest) returns (rpc.user.UserResponse);
   */
  create(
    input: CreateRequest,
    options?: RpcOptions
  ): UnaryCall<CreateRequest, UserResponse> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options)
    return stackIntercept<CreateRequest, UserResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input
    )
  }
  /**
   * @generated from protobuf rpc: Index(google.protobuf.Empty) returns (rpc.user.UsersResponse);
   */
  index(input: Empty, options?: RpcOptions): UnaryCall<Empty, UsersResponse> {
    const method = this.methods[2],
      opt = this._transport.mergeOptions(options)
    return stackIntercept<Empty, UsersResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input
    )
  }
}
