// @generated by protobuf-ts 2.0.0-alpha.20 with parameters long_type_number,generate_dependencies
// @generated from protobuf file "rpc/order/shipping_address_resource.proto" (package "rpc.order", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'
/**
 * @generated from protobuf message rpc.order.ShippingAddressResource
 */
export interface ShippingAddressResource {
  /**
   * @generated from protobuf field: string id = 1;
   */
  id: string
  /**
   * @generated from protobuf field: string address1 = 2;
   */
  address1: string
  /**
   * @generated from protobuf field: string address2 = 3;
   */
  address2: string
  /**
   * @generated from protobuf field: string city = 4;
   */
  city: string
  /**
   * @generated from protobuf field: string country = 5;
   */
  country: string
  /**
   * @generated from protobuf field: string name = 6;
   */
  name: string
  /**
   * @generated from protobuf field: string phone = 7;
   */
  phone: string
  /**
   * @generated from protobuf field: string zip = 8;
   */
  zip: string
}
// @generated message type with reflection information, may provide speed optimized methods
class ShippingAddressResource$Type extends MessageType<ShippingAddressResource> {
  constructor() {
    super('rpc.order.ShippingAddressResource', [
      { no: 1, name: 'id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'address1', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: 'address2', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 4, name: 'city', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 5, name: 'country', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 6, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 7, name: 'phone', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 8, name: 'zip', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ])
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ShippingAddressResource
  ): ShippingAddressResource {
    let message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* string id */ 1:
          message.id = reader.string()
          break
        case /* string address1 */ 2:
          message.address1 = reader.string()
          break
        case /* string address2 */ 3:
          message.address2 = reader.string()
          break
        case /* string city */ 4:
          message.city = reader.string()
          break
        case /* string country */ 5:
          message.country = reader.string()
          break
        case /* string name */ 6:
          message.name = reader.string()
          break
        case /* string phone */ 7:
          message.phone = reader.string()
          break
        case /* string zip */ 8:
          message.zip = reader.string()
          break
        default:
          let u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          let d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: ShippingAddressResource,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string id = 1; */
    if (message.id !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.id)
    /* string address1 = 2; */
    if (message.address1 !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.address1)
    /* string address2 = 3; */
    if (message.address2 !== '')
      writer.tag(3, WireType.LengthDelimited).string(message.address2)
    /* string city = 4; */
    if (message.city !== '')
      writer.tag(4, WireType.LengthDelimited).string(message.city)
    /* string country = 5; */
    if (message.country !== '')
      writer.tag(5, WireType.LengthDelimited).string(message.country)
    /* string name = 6; */
    if (message.name !== '')
      writer.tag(6, WireType.LengthDelimited).string(message.name)
    /* string phone = 7; */
    if (message.phone !== '')
      writer.tag(7, WireType.LengthDelimited).string(message.phone)
    /* string zip = 8; */
    if (message.zip !== '')
      writer.tag(8, WireType.LengthDelimited).string(message.zip)
    let u = options.writeUnknownFields
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      )
    return writer
  }
}
/**
 * @generated MessageType for protobuf message rpc.order.ShippingAddressResource
 */
export const ShippingAddressResource = new ShippingAddressResource$Type()
