// @generated by protobuf-ts 2.0.0-alpha.20 with parameters long_type_number,generate_dependencies
// @generated from protobuf file "rpc/order/order_service.proto" (package "rpc.order", syntax proto3)
// tslint:disable
import type { RpcTransport } from '@protobuf-ts/runtime-rpc'
import type { ServiceInfo } from '@protobuf-ts/runtime-rpc'
import { Order } from './order_service'
import type { ShowRequest } from './show_request'
import { stackIntercept } from '@protobuf-ts/runtime-rpc'
import type { OrderResource } from './order_resource'
import type { Empty } from '../../google/protobuf/empty'
import type { UnaryCall } from '@protobuf-ts/runtime-rpc'
import type { RpcOptions } from '@protobuf-ts/runtime-rpc'
/**
 * @generated from protobuf service rpc.order.Order
 */
export interface IOrderClient {
  /**
   * @generated from protobuf rpc: Create(google.protobuf.Empty) returns (rpc.order.OrderResource);
   */
  create(input: Empty, options?: RpcOptions): UnaryCall<Empty, OrderResource>
  /**
   * @generated from protobuf rpc: Show(rpc.order.ShowRequest) returns (rpc.order.OrderResource);
   */
  show(
    input: ShowRequest,
    options?: RpcOptions
  ): UnaryCall<ShowRequest, OrderResource>
}
/**
 * @generated from protobuf service rpc.order.Order
 */
export class OrderClient implements IOrderClient, ServiceInfo {
  typeName = Order.typeName
  methods = Order.methods
  options = Order.options
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * @generated from protobuf rpc: Create(google.protobuf.Empty) returns (rpc.order.OrderResource);
   */
  create(input: Empty, options?: RpcOptions): UnaryCall<Empty, OrderResource> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options)
    return stackIntercept<Empty, OrderResource>(
      'unary',
      this._transport,
      method,
      opt,
      input
    )
  }
  /**
   * @generated from protobuf rpc: Show(rpc.order.ShowRequest) returns (rpc.order.OrderResource);
   */
  show(
    input: ShowRequest,
    options?: RpcOptions
  ): UnaryCall<ShowRequest, OrderResource> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options)
    return stackIntercept<ShowRequest, OrderResource>(
      'unary',
      this._transport,
      method,
      opt,
      input
    )
  }
}
