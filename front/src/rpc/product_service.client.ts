// @generated by protobuf-ts 2.0.0-alpha.20 with parameters long_type_number,generate_dependencies
// @generated from protobuf file "product_service.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from '@protobuf-ts/runtime-rpc'
import type { ServiceInfo } from '@protobuf-ts/runtime-rpc'
import { Product } from './product_service'
import type { ProductsResponse } from './products_response'
import type { Empty } from './google/protobuf/empty'
import { stackIntercept } from '@protobuf-ts/runtime-rpc'
import type { ProductResponse } from './product_response'
import type { ProductShowRequest } from './product_show_request'
import type { UnaryCall } from '@protobuf-ts/runtime-rpc'
import type { RpcOptions } from '@protobuf-ts/runtime-rpc'
/**
 * @generated from protobuf service Product
 */
export interface IProductClient {
  /**
   * @generated from protobuf rpc: Show(ProductShowRequest) returns (ProductResponse);
   */
  show(
    input: ProductShowRequest,
    options?: RpcOptions
  ): UnaryCall<ProductShowRequest, ProductResponse>
  /**
   * @generated from protobuf rpc: Index(google.protobuf.Empty) returns (ProductsResponse);
   */
  index(input: Empty, options?: RpcOptions): UnaryCall<Empty, ProductsResponse>
}
/**
 * @generated from protobuf service Product
 */
export class ProductClient implements IProductClient, ServiceInfo {
  typeName = Product.typeName
  methods = Product.methods
  options = Product.options
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * @generated from protobuf rpc: Show(ProductShowRequest) returns (ProductResponse);
   */
  show(
    input: ProductShowRequest,
    options?: RpcOptions
  ): UnaryCall<ProductShowRequest, ProductResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options)
    return stackIntercept<ProductShowRequest, ProductResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input
    )
  }
  /**
   * @generated from protobuf rpc: Index(google.protobuf.Empty) returns (ProductsResponse);
   */
  index(
    input: Empty,
    options?: RpcOptions
  ): UnaryCall<Empty, ProductsResponse> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options)
    return stackIntercept<Empty, ProductsResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input
    )
  }
}
